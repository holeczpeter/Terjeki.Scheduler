# --- 1. build lépés: SDK image a restore-hoz és publish-hez ---
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Másoljuk be a solution-t és az összes csproj-ot, hogy a restore fel tudja dolgozni az összes projektet
COPY Terjeki.Scheduler.sln ./
COPY Terjeki.Scheduler.Core/*.csproj Terjeki.Scheduler.Core/
COPY Terjeki.Scheduler.Infrastucure/*.csproj Terjeki.Scheduler.Infrastucure/
COPY Terjeki.Scheduler.Application/*.csproj Terjeki.Scheduler.Application/
COPY Terjeki.Scheduler.Web/*.csproj Terjeki.Scheduler.Web/

# Restore a teljes solution
RUN dotnet restore Terjeki.Scheduler.sln

# Másoljuk be az összes forrást
COPY . .

# Publish csak a Blazor WebAssembly projektet
WORKDIR /src/Terjeki.Scheduler.Web
RUN dotnet publish -c Release -o /app/publish --no-restore /p:UseAppHost=false

# --- 2. runtime lépés: NGINX image a statikus wwwroot-hoz ---
FROM nginx:alpine AS runtime
WORKDIR /usr/share/nginx/html

# töröljük az alapértelmezett nginx html fájlokat
RUN rm -rf ./*

# másoljuk át a Blazor build eredményét
COPY --from=build /app/publish/wwwroot .

# ha később SPÁhoz kell custom routing, ide jöhet egy COPY nginx.conf ...
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
