# --- 1. Build stage: a teljes megoldást restore-oljuk és publish-eljük ---
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Másoljuk be először csak a sln-et és a csproj fájlokat (cache-elés miatt)
COPY Terjeki.Scheduler.sln ./
COPY Terjeki.Scheduler.Core/*.csproj   Terjeki.Scheduler.Core/
COPY Terjeki.Scheduler.Infrastucure/*.csproj Terjeki.Scheduler.Infrastucure/
COPY Terjeki.Scheduler.Application/*.csproj Terjeki.Scheduler.Application/
COPY Terjeki.Scheduler.Api/*.csproj    Terjeki.Scheduler.Api/      # <-- ezt kellett hozzáadni
COPY Terjeki.Scheduler.Web/*.csproj    Terjeki.Scheduler.Web/

# Restore a teljes solution-re
RUN dotnet restore Terjeki.Scheduler.sln

# Másoljuk át a maradék forrást is
COPY . .

# Publish csak a Blazor WebAssembly projektet
WORKDIR /src/Terjeki.Scheduler.Web
RUN dotnet publish -c Release -o /app/publish /p:UseAppHost=false

# --- 2. Runtime stage: NGINX a statikus fájlokhoz ---
FROM nginx:alpine AS runtime
WORKDIR /usr/share/nginx/html

# (Ha kell SPA routing, ide jön az nginx.conf COPY-ja)
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Másoljuk át a publish-elt wwwroot-ot
COPY --from=build /app/publish/wwwroot ./

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
