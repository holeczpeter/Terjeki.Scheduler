### 1) Build stage (dotnet SDK) ###
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# copy sln + csproj fájlok
COPY Terjeki.Scheduler.sln ./
COPY Terjeki.Scheduler.Core/*.csproj   Terjeki.Scheduler.Core/
COPY Terjeki.Scheduler.Infrastructure/*.csproj Terjeki.Scheduler.Infrastructure/
COPY Terjeki.Scheduler.Application/*.csproj    Terjeki.Scheduler.Application/
COPY Terjeki.Scheduler.Api/*.csproj            Terjeki.Scheduler.Api/
COPY Terjeki.Scheduler.Web/*.csproj            Terjeki.Scheduler.Web/

# restore az egész solution-re
RUN dotnet restore Terjeki.Scheduler.sln

# másold be az összes forrást
COPY . .

# publikáld le a Blazor WebAssembly-t
WORKDIR /src/Terjeki.Scheduler.Web
RUN dotnet publish -c Release -o /app/publish /p:UseAppHost=false

### 2) Runtime stage (NGINX) ###
FROM nginx:alpine AS runtime
WORKDIR /usr/share/nginx/html
COPY --from=build /app/publish/wwwroot ./
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
