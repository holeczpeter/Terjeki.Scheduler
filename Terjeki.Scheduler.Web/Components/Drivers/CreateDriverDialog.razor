@using MediatR
@using Terjeki.Scheduler.Core
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IMediator Mediator

<RadzenStack Gap="1.5rem">
    <EditForm EditContext="@editContext">
        <DataAnnotationsValidator />
        <div class="content">
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Sofőr kiválasztása </RadzenText>
                <RadzenDropDown Data="@users"
                                @bind-Value="@form.Driver"
                                TextProperty="Name"
                                AllowClear="true"
                                AllowFiltering="true"
                                Style="width: 100%;"
                                Name="DriversDropDown" />
            </div>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Busz kiválasztása </RadzenText>
                <RadzenDropDown Data=@buses
                                TValue="BusModel" @bind-Value=@form.Bus
                                AllowClear="true"
                                AllowFiltering="true" Style="width: 100%;"
                                Name="DropDownCustomObjects" />
            </div>
        </div>
        <div class="flex-button">

            <TButton Label="Mégsem"
                     Type="@TButton.TypeEnum.Outline"
                     Size="@TButton.SizeEnum.Medium"
                     OnClick="() => Close()">
            </TButton>
            <TButton Label="Mentés"
                     Type="@TButton.TypeEnum.Primary"
                     Size="@TButton.SizeEnum.Medium"
                     OnClick="()=> OnSave()">
            </TButton>

        </div>
    </EditForm>
</RadzenStack>

@code {
    private CreateDriverForm form = new();

    private EditContext editContext = new(new CreateDriverForm());

    private bool isFormValid = false;

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private ValidationMessageStore messageStore;

    private List<DriverModel> users;
    private List<BusModel> buses;
    protected override async Task OnInitializedAsync()
    {
        var allBus = await Mediator.Send(new GetBusesQuery());
        buses = allBus.ToList();
        

        editContext = new EditContext(form);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnFieldChanged += ValidateForm;
        form.PropertyChanged += OnFieldChanged;

        await base.OnInitializedAsync();
    }

    private void OnFieldChanged(object? sender, PropertyChangedEventArgs e)
    {
        editContext.NotifyFieldChanged(new FieldIdentifier(form, nameof(CreateDriverForm.Driver)));
    }

    private void ValidateForm(object? sender, FieldChangedEventArgs e)
    {

        isFormValid = editContext.Validate();
        StateHasChanged();
    }


    public async Task OnSave()
    {
        if (isFormValid)
        {
            var request = new CreateDriverCommand()
                {
                    Driver = form.Driver,
                    Bus = form.Bus,
                };
            var result = await Mediator.Send(request, _cancellationTokenSource.Token);
            if (result == null)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Sikertelen mentés",
                        Duration = 2000
                    });
                DialogService.Close(result);
                DialogService.CloseSide(result);
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = $"Sikeres rögzítés",
                        Duration = 2000
                    });
                DialogService.Close(result);
                DialogService.CloseSide(result);
            }

        }
    }
    private void Close()
    {
        DialogService.Close(null);
    }
}
