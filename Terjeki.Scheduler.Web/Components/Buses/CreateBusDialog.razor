@using MediatR
@using Terjeki.Scheduler.Core
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IMediator Mediator

<RadzenStack Gap="1.5rem">
    <EditForm EditContext="@editContext">
        <DataAnnotationsValidator />
        <div class="content">
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Név </RadzenText>
                <RadzenTextBox @bind-Value=@form.Brand Style="width: 100%" />
                <ValidationMessage For="@(() => form.Brand)" />
            </div>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Rendszám </RadzenText>
                <RadzenTextBox @bind-Value=@form.LicensePlateNumber Style="width: 100%" />
                <ValidationMessage For="@(() => form.LicensePlateNumber)" />
            </div>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Férőhelyek száma </RadzenText>
                <RadzenDropDown Data=@capacities
                                TValue="CapacityModel" @bind-Value=@form.Capacity AllowClear="true" AllowFiltering="true" Style="width: 100%;"
                                Name="DropDownCapacities" />
            </div>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Km óra állás </RadzenText>
                <RadzenNumeric @bind-Value=@form.CurrentMileage InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width: 100%;" />
            </div>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Leírás </RadzenText>
                <RadzenTextArea @bind-Value=@form.Description Cols="30" Rows="3" aria-label="TextArea with 3 rows and 30 columns" Style="width: 100%;" />
                <ValidationMessage For="@(() => form.Description)" />
            </div>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Sofőr kiválasztása </RadzenText>
                <RadzenDropDown Data=@drivers 
                    TValue="DriverModel" @bind-Value=@form.Driver AllowClear="true" AllowFiltering="true" Style="width: 100%;" 
                Name="DropDownCustomObjects" />
            </div>
         
        </div>
        <div class="flex-button">
            

            <TButton Label="Mégsem"
                     Type="@TButton.TypeEnum.Outline"
                     Size="@TButton.SizeEnum.Medium"
                     OnClick="() => Close()">
            </TButton>
            <TButton Label="Mentés"
                     Type="@TButton.TypeEnum.Primary"
                     Size="@TButton.SizeEnum.Medium"
                     OnClick="()=> OnSave()">
            </TButton>

        </div>
    </EditForm>
</RadzenStack>

@code {
    private CreateBusForm form = new();

    private EditContext editContext = new(new CreateBusForm());

    private bool isFormValid = false;

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private ValidationMessageStore messageStore;

    private List<string> buses;

    private List<DriverModel> drivers;
    private List<CapacityModel> capacities;
    protected override async Task OnInitializedAsync()
    {
        var allCapacities = await Mediator.Send(new GetCapacities());
        capacities = allCapacities.ToList();

        var allDrivers = await Mediator.Send(new GetDriversQuery());
        drivers = allDrivers.ToList();

        var allBus = await Mediator.Send(new GetBusesQuery());
        buses = allBus.Select(x => x.Brand).ToList();

        editContext = new EditContext(form);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnFieldChanged += ValidateForm;
        form.PropertyChanged += OnFieldChanged;

        await base.OnInitializedAsync();
    }

    private void OnFieldChanged(object? sender, PropertyChangedEventArgs e)
    {
        editContext.NotifyFieldChanged(new FieldIdentifier(form, nameof(CreateBusForm.Brand)));
    }

    private void ValidateForm(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(CreateBusForm.Brand))
        {
            ValidateName();
        }

        isFormValid = editContext.Validate();
        StateHasChanged();
    }

    private void ValidateName()
    {
        messageStore.Clear(new FieldIdentifier(form, nameof(CreateBusForm.Brand)));

        if (buses.Any(n => n.Equals(form.Brand, StringComparison.OrdinalIgnoreCase)))
        {
            messageStore.Add(new FieldIdentifier(form, nameof(CreateBusForm.Brand)), $"A '{form.Brand}' nevű busz már létezik");
        }

        editContext.NotifyValidationStateChanged();
    }
    public async Task OnSave()
    {
        if (!string.IsNullOrEmpty(form.Brand))
        {
            var request = new CreateBusCommand()
                {

                    Name = form.Brand,
                    Description = form.Description,
                    LicensePlateNumber = form.LicensePlateNumber,
                    Capacity = form.Capacity,
                    Driver = form.Driver,
                    CurrentMileage = form.CurrentMileage,
                    
                };
            var result = await Mediator.Send(request, _cancellationTokenSource.Token);
            if (result == null)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Sikertelen mentés",
                        Duration = 2000
                    });
                DialogService.Close(result);
                DialogService.CloseSide(result);
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = $"Sikeres rögzítés",
                        Duration = 2000
                    });
                DialogService.Close(result);
                DialogService.CloseSide(result);
            }

        }
    }
    private void Close()
    {
        DialogService.Close(null);
    }
}
