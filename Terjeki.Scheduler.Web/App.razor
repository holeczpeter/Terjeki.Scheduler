@using Microsoft.AspNetCore.Components.Authorization
@using Terjeki.Scheduler.Core.Enums
@using Terjeki.Scheduler.Web.Pages
@using Terjeki.Scheduler.Web.Services
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IViewService ViewService
<CascadingAuthenticationState>
  <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
            </AuthorizeRouteView>
    </Found>
    <NotFound>
      <LayoutView Layout="@typeof(MainLayout)">
        <p>Page not found.</p>
      </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>

@code {
   
    private DotNetObjectReference<App>? objRef;
    protected override async Task OnInitializedAsync()
    {
       
        objRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("onScreenResize", objRef);
        await SetLayoutBasedOnScreenSize();
    }
  
    [JSInvokable]
    public async Task SetLayoutBasedOnScreenSize()
    {
        int width = await JS.InvokeAsync<int>("getScreenWidth");
        var prev = ViewService.ViewType;
        var @new = width > 1000 ? ViewTypes.Desktop : ViewTypes.Mobile;
        if (prev != @new)
        {
            ViewService.ViewType = @new;
            StateHasChanged();
        }
    }

    public void Dispose() => objRef?.Dispose();
}
