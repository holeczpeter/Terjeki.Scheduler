@layout AuthLayout
@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@using Terjeki.Scheduler.Web.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
<RadzenStack Gap="1.5rem">
    <EditForm Model="model" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
          <div class="content">
            <a href="/" id="header-logo"><img src="images/terjeki-busz-logo.svg" /></a>
            <h3>Elfelejtett jelszó</h3>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">E-mail cím</RadzenText>
                <RadzenTextBox @bind-Value="model.Email" Style="width:100%;min-width:300px" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>

            <RadzenButton Text="Küldés"
                          ButtonStyle="ButtonStyle.Primary"
                          Type="ButtonType.Submit"
                          Style="min-width:300px" />
            <RadzenButton Text="Vissza a bejelentkezéshez"
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="min-width:300px"
                          Click="() => NavigateToLogin()" />
        </div>
       
    </EditForm>
</RadzenStack>

@code {
    private ForgotPasswordModel model = new();
    private string? successMessage;
    private string? errorMessage;

    private async Task HandleSubmit()
    {
        
        try
        {
            var result = await AuthService.SendPasswordResetLinkAsync(model);
            if (result)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Ha létezik ilyen e-mail cím, elküldtünk egy visszaállító linket.",
                        Duration = 2000
                    });
                await NavigateToLogin();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "A jelszó elküldése sikertelen",
                        Duration = 2000
                    });

            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = ex.Message,
                    Duration = 2000
                });
            
        }
    }
    private async Task NavigateToLogin() 
    {
        Navigation.NavigateTo("/login");
    }
}
