@layout AuthLayout
@page "/reset-password/{email}/{token}"
@using System.ComponentModel.DataAnnotations
@using Terjeki.Scheduler.Web.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<RadzenStack Gap="1.5rem">


    <EditForm Model="model" OnValidSubmit="HandleReset">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="content">
            <a href="/" id="header-logo"><img src="images/terjeki-busz-logo.svg" /></a>
            <h3>Jelszó visszaállítása</h3>
            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Új jelszó</RadzenText>
                <RadzenPassword @bind-Value="model.NewPassword" Style="width:100%;min-width:300px" />
                <ValidationMessage For="@(() => model.NewPassword)" />
            </div>

            <div class="form-input">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Jelszó újra</RadzenText>
                <RadzenPassword @bind-Value="model.ConfirmPassword" Style="width:100%;min-width:300px" />
                <ValidationMessage For="@(() => model.ConfirmPassword)" />
            </div>

            <RadzenButton Text="Visszaállítás"
                          ButtonStyle="ButtonStyle.Primary"
                          Type="ButtonType.Submit"
                          Style="min-width:300px" />
            <RadzenButton Text="Vissza a bejelentkezéshez"
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="min-width:300px"
                          Click="() => NavigateToLogin()" />
        </div>
    </EditForm>
</RadzenStack>

@code {
    [Parameter] public string email { get; set; } = string.Empty;
    [Parameter] public string token { get; set; } = string.Empty;


    private ResetPasswordModel model = new();
    private string? successMessage;
    private string? errorMessage;

    protected override void OnParametersSet()
    {
        
        model.Email = Uri.UnescapeDataString(email);
        model.Token = Uri.UnescapeDataString(token);
    }

    private async Task HandleReset()
    {

        try
        {
            var result = await AuthService.ResetPasswordAsync(model);
            if (result)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "A jelszó visszaállítása sikertelen",
                        Duration = 2000
                    });
                await NavigateToLogin();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "A jelszó sikeresen visszaállítva. Most már bejelentkezhetsz az új jelszóddal.",
                        Duration = 2000
                    });

            }

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = ex.Message,
                    Duration = 2000
                });
        }
    }
    private async Task NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
